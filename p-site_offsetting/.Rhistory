# Load the ribowaltz package
library(riboWaltz)
# Load in the fly GTF annotation file
df = create_annotation(gtfpath = "/Users/keeganflanagan/Desktop/Khanh_position/genomes_and_samples/Fly/Drosophila_melanogaster.BDGP6.32.103.gtf")
# Load up bam_list from transcriptome
bam_list = bamtolist("/Users/keeganflanagan/Desktop/Khanh_position/genomes_and_samples/Transcriptome_dmel/Fmr1_RPF_2_Aligned.toTranscriptome.out.bam",
annotation = df)
# Filter the offsets dataframe to only include the information needed by plastid.
plastid_offsets = data.frame(length=offsets$length,
p_offset=offsets$corrected_offset_from_3)
# Calculate P_site offset
offsets = psite(data = bam_list, start = FALSE, extremity = "3end",
plot = TRUE, plot_dir = "/Users/keeganflanagan/Desktop/Khanh_position")
# Load up bam_list from transcriptome
bam_list = bamtolist("/Users/keeganflanagan/Desktop/Khanh_position/genomes_and_samples/Transcriptome_dmel",
annotation = df)
# Load the ribowaltz package
library(riboWaltz)
# Load in the fly GTF annotation file
df = create_annotation(gtfpath = "/Users/keeganflanagan/Desktop/Khanh_position/genomes_and_samples/Ecoli/GCF_000005845.2_ASM584v2_genomic.gtf")
# Load up bam_list from transcriptome
bam_list = bamtolist("/Users/keeganflanagan/Desktop/Khanh_position/genomes_and_samples/Transcriptome_ecol",
annotation = df)
# Load in the fly GTF annotation file
df = create_annotation(gtfpath = "/Users/keeganflanagan/Desktop/Khanh_position/genomes_and_samples/Ecoli/GCF_000005845.2_ASM584v2_genomic.gtf")
# Load in the fly GTF annotation file
df = create_annotation(gtfpath = "/Users/keeganflanagan/Desktop/Khanh_position/genomes_and_samples/Ecoli/GCA_000005845.2_ASM584v2_genomic.gtf")
# Load in the fly GTF annotation file
df = create_annotation(gtfpath = "/Users/keeganflanagan/Desktop/Khanh_position/genomes_and_samples/Ecoli/GCF_000005845.2_ASM584v2_genomic.gtf")
BiocManager::install("GenomicFeatures")
library(GenomicFeatures)
install.packages("devtools")
library(devtools)
install.packages('digest')
install.packages('tidyverse')
library(dplyr)
install.packages('dplyr')
help("install.packages")
install.packages("dplyr")
install.packages('devtools')
install.packages('devtools')
install.packages('devtools')
install.packages("tidyverse")
library(devtools)
install_github("LabTranslationalArchitectomics/riboWaltz", dependencies = TRUE,
build_opts = c("--no-resave-data", "--no-manual"))
# Load the ribowaltz package
library(riboWaltz)
# Load in the fly GTF annotation file
df = create_annotation(gtfpath = "/home/keeganfl/Desktop/Work_Fall_2021/genomes_&_samples/dmel/Drosophila_melanogaster.BDGP6.32.103.gtf")
# Load up bam_list from transcriptome
bam_list = bamtolist("/home/keeganfl/Desktop/Work_Fall_2021/genomes_&_samples/tra_dmel",
annotation = df)
View(bam_list)
# Calculate P_site offset
offsets = psite(data = bam_list, start = FALSE, extremity = "3end",
plot = TRUE, plot_dir = "/home/keeganfl/Desktop/Work_Fall_2021/data_tables/p-site_offsets/dmel/")
View(offsets)
offsets$sample
unique(offsets$sample)
sample = unique(offsets$sample)
print(i)
for (i in 1:length(samples)) {
print(i)
}
samples = unique(offsets$sample)
for (i in 1:length(samples)) {
print(i)
}
for (i in 1:length(samples)) {
sam_offs = subset(offsets, sample == samples[i],
select = c('length', 'corrected_offset_from_3'))
colnames(sam_offs) = c('length', 'p_offset')
write.table(sam_offs, paste("/home/keeganfl/Desktop/Work_Fall_2021/data_tables/p-site_offsets/dmel/",
samples[i],"p-site-offsets"),sep = "\t" , row.names = FALSE)
}
for (i in 1:length(samples)) {
sam_offs = subset(offsets, sample == samples[i],
select = c('length', 'corrected_offset_from_3'))
colnames(sam_offs) = c('length', 'p_offset')
write.table(sam_offs, paste("/home/keeganfl/Desktop/Work_Fall_2021/data_tables/p-site_offsets/dmel/",
samples[i],"p-site-offsets", sep=""),sep = "\t" , row.names = FALSE)
}
for (i in 1:length(samples)) {
sam_offs = subset(offsets, sample == samples[i],
select = c('length', 'corrected_offset_from_3'))
colnames(sam_offs) = c('length', 'p_offset')
write.table(sam_offs, paste("/home/keeganfl/Desktop/Work_Fall_2021/data_tables/p-site_offsets/dmel/",
samples[i],"_p-site-offsets", sep=""),sep = "\t" , row.names = FALSE)
}
# Load the ribowaltz package
library(riboWaltz)
# Load in the fly GTF annotation file
df = create_annotation(gtfpath = "/home/keeganfl/Desktop/Work_Fall_2021/genomes_&_samples/human/hg38.refGene.gtf")
# Load up bam_list from transcriptome
bam_list = bamtolist("/home/keeganfl/Desktop/Work_Fall_2021/genomes_&_samples/tra_human",
annotation = df)
# Calculate P_site offset
offsets = psite(data = bam_list, start = FALSE, extremity = "3end",
plot = TRUE, plot_dir = "/home/keeganfl/Desktop/Work_Fall_2021/data_tables/p-site_offsets/human")
# Filter the offsets dataframe to only include the information needed by plastid.
samples = unique(offsets$sample)
for (i in 1:length(samples)) {
sam_offs = subset(offsets, sample == samples[i],
select = c('length', 'corrected_offset_from_3'))
colnames(sam_offs) = c('length', 'p_offset')
write.table(sam_offs, paste("/home/keeganfl/Desktop/Work_Fall_2021/data_tables/p-site_offsets/human/",
samples[i],"_p-site-offsets", sep=""),sep = "\t" , row.names = FALSE)
}
# Load the ribowaltz package
library(riboWaltz)
# Load in the fly GTF annotation file
df = create_annotation(gtfpath = "/home/keeganfl/Desktop/Work_Fall_2021/genomes_&_samples/ecol/Escherichia_coli_str_k_12_substr_mg1655_gca_000005845.ASM584v2.51.gtf")
# Load up bam_list from transcriptome
bam_list = bamtolist("/home/keeganfl/Desktop/Work_Fall_2021/genomes_&_samples/tra_ecol",
annotation = df)
# Calculate P_site offset
offsets = psite(data = bam_list, start = FALSE, extremity = "3end",
plot = TRUE, plot_dir = "/home/keeganfl/Desktop/Work_Fall_2021/data_tables/p-site_offsets/ecol")
# Filter the offsets dataframe to only include the information needed by plastid.
samples = unique(offsets$sample)
for (i in 1:length(samples)) {
sam_offs = subset(offsets, sample == samples[i],
select = c('length', 'corrected_offset_from_3'))
colnames(sam_offs) = c('length', 'p_offset')
write.table(sam_offs, paste("/home/keeganfl/Desktop/Work_Fall_2021/data_tables/p-site_offsets/ecol/",
samples[i],"_p-site-offsets", sep=""),sep = "\t" , row.names = FALSE)
}
# Calculate P_site offset
offsets = psite(data = bam_list, start = FALSE, extremity = "3end",
plot = TRUE, plot_dir = "/home/keeganfl/Desktop/Work_Fall_2021/data_tables/p-site_offsets/ecol")
View(df)
View(df)
# Load the ribowaltz package
library(riboWaltz)
# Load in the fly GTF annotation file
df2 = create_annotation(gtfpath = "/home/keeganfl/Desktop/Work_Fall_2021/genomes_&_samples/human/hg38.refGene.gtf")
View(df2)
# Load up bam_list from transcriptome
bam_list2 = bamtolist("/home/keeganfl/Desktop/Work_Fall_2021/genomes_&_samples/tra_human",
annotation = df2)
# Calculate P_site offset
offsets2 = psite(data = bam_list2, start = FALSE, extremity = "3end",
plot = TRUE, plot_dir = "/home/keeganfl/Desktop/Work_Fall_2021/data_tables/p-site_offsets/human")
View(bam_list)
View(bam_list)
# Calculate P_site offset
offsets = psite(data = bam_list, start = FALSE, extremity = "3end")
View(bam_list2)
View(df)
View(df2)
# Calculate P_site offset
offsets = psite(data = bam_list, start = FALSE, extremity = "3end")
# Calculate P_site offset
offsets = psite(data = bam_list, start = FALSE, extremity = "auto")
View(df)
